/// <reference types="node" />
import { Options as AppendOptions } from './append';
import { Options as DirOptions } from './dir';
import { Options as FileOptions } from './file';
import { Options as FindOptions } from './find';
import { Options as InspectTreeOptions } from './inspect_tree';
import { WriteOptions } from './interfaces';
import { ICopyOptions, IInspectOptions } from './interfaces';
export interface IJetpack {
    cwd(w?: any): IJetpack | string;
    path(): string;
    append(path: string, data: string | Buffer | Object, options?: AppendOptions): void;
    appendAsync(path: string, data: string | Buffer | Object, options?: AppendOptions): Promise<null>;
    copy(from: string, to: string, options?: ICopyOptions): any;
    copyAsync(from: string, to: string, options?: ICopyOptions): any;
    createWriteStream(path: string, options?: {
        flags?: string;
        encoding?: string;
        fd?: number;
        mode?: number;
        autoClose?: boolean;
        start?: number;
    }): any;
    createReadStream(path: string, options?: {
        flags?: string;
        encoding?: string;
        fd?: number;
        mode?: number;
        autoClose?: boolean;
        start?: number;
        end?: number;
    }): any;
    dir(path: string, criteria?: DirOptions): IJetpack;
    dirAsync(path: string, criteria?: DirOptions): Promise<IJetpack>;
    exists(path: string): boolean | string;
    existsAsync(path: string): Promise<boolean | string>;
    file(path: string, criteria?: FileOptions): any;
    fileAsync(path: string, criteria?: FileOptions): any;
    find(startPath: string, options: FindOptions): string[];
    findAsync(startPath: string, options: FindOptions): Promise<string[]>;
    inspect(path: string, fieldsToInclude: IInspectOptions): any;
    inspectAsync(path: string, fieldsToInclude: IInspectOptions): any;
    inspectTree(path: string, options?: InspectTreeOptions): any;
    inspectTreeAsync(path: string, options?: InspectTreeOptions): any;
    list(path: string): string[];
    listAsync(path: string): Promise<string[]>;
    move(from: string, to: string): void;
    moveAsync(from: string, to: string): Promise<null>;
    read(path: string, returnAs?: string): any;
    readAsync(path: string, returnAs?: string): Promise<string>;
    remove(path: string): void;
    removeAsync(path: string): Promise<null>;
    rename(path: string, newName: string): void;
    renameAsync(path: string, newName: string): Promise<null>;
    symlink(symlinkValue: string, path: string): void;
    symlinkAsync(symlinkValue: string, path: string): Promise<null>;
    write(path: string, data: string | Buffer | Object, options?: WriteOptions): void;
    writeAsync(path: string, data: string | Buffer | Object, options?: WriteOptions): any;
}
export declare function jetpack(cwdPath?: string): IJetpack;
